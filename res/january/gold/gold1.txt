
On Error GoTo 0
Class TowersOfHanoi

	Private aTowersArray 	'2d array for holding our Towers object
	Private m_columns		'column count
	Private m_disks			'disk count
	Private legal_status	'current status of if moves have been legal.
	
	Private Sub Class_Initialize   'Initialize our array using default values for Towers of Hanoi
		'For loop counters
		Dim i
		Dim j
		Dim max,min
		Dim NumOfDisks

		'Currently using default values of 4 disks, 3 columns.  Will update disk number for testing.
		
		m_columns = 2							'0,1,2
		
		max=30
		min=10
		Randomize
		NumOfDisks = Int((max-min+1)*Rnd+min)
		'Random number of disks betwen 10 and 30
		m_disks = NumOfDisks								'0,1,2,3
		legal_status = true
		ReDim aTowersArray(m_columns, m_disks)	'(0, 1, 2 x 0, 1, 2, 3)
		
		'Initialize the array
		'Stack the disks on the first column
		For i = 0 to m_disks
			aTowersArray(0, i) = m_disks - i
		Next

		'Populate the rest of the array with a default value of  -1
		For i = 1 to m_columns
			For j = 0 to m_disks
				aTowersArray(i, j) = -1
			Next
		Next

		'aTowersArray now looks like this:
		'		0	1	2	3
		'0	  	3	2	1	0
		'1		-1	-1	-1	-1
		'2		-1	-1	-1	-1
	End Sub
	
	
	'Public property for Disk count(read-only)
	Public Property Get Disks
		Disks = m_disks
	End Property
	
	'Public property for Column count(read-only)
	Public Property Get Columns
		Columns = m_columns
	End Property
	
	'Public property for Towers array(read-only)
	Public Property Get Towers
		Towers = aTowersArray
	End Property
	
	Public Property Get Legal
		Legal = legal_status
	End Property
	
	'LegalMove function for determining if the columns can be swapped, and if so, to update the Towers array
	'Column1 - column we're moving a disk from
	'Column2 - column we're moving a disk to
	
	'Legal Move logic:
	'Only one disk may be moved at a time.
	'Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack.
	'No disk may be placed on top of a smaller disk.
	Public Function LegalMove(column1, column2)
		Dim disk
		Dim i
		Dim j

		disk = -1

		'Start at the top of our first column and grab the first thing that isn't a -1
		For i = UBound(aTowersArray, 2) to 0 Step -1
			If aTowersArray(column1, i) <> -1 Then
				'Store the current disk value
				disk = aTowersArray(column1, i)
				Exit For
			End If
		Next
		
		'Make sure we have a valid disk from the first column, else we return false and exit the function
		If disk = -1 Then
			LegalMove = False
			Exit Function
		End If

		'Start at the bottom for our second column
		For j = 0 to UBound(aTowersArray, 2)
			'If it's the first disk in the column, or if it's smaller than all the other disks in the column, then it's a legal move
			If aTowersArray(column2, j) = -1 Then
				aTowersArray(column2, j) = disk
				
				'If we place a disk, then we need to remove from the initial column
				aTowersArray(column1, i) = -1
				LegalMove = True
				Exit Function
				
			'If it's bigger than one currently on the column, we can't place it on that column.  Return false and exit
			ElseIf disk > aTowersArray(column2, j) Then
				LegalMove = False
				Exit Function
			End If
			
			'There's no case needed for them being equal, as the arrays aren't built with equal disks
			'If the disk is < a disk on the column already, we simply move on to the next iteration
		Next
	End Function
	
	Public Function Move(col1, col2)
		legal_status = LegalMove(col1, col2)
	End Function
	Public Function PrintTowers()
		Dim msgString
		Dim i
		Dim j
		msgString = "<table  style='text-align:center' class='table table-bordered  table-condensed'>"
		For j = UBound(aTowersArray, 2) to 0 Step -1
			msgString = msgString & "<tr>"
			For i = 0 To UBound(aTowersArray)
				
				If aTowersArray(i, j) = -1 Then
					msgString = msgString & "<td>x</td>"
				Else
					msgString = msgString & "<td>" & aTowersArray(i, j)  & "</td>"
				End If
			Next
			msgString = msgString & "</tr>"
		Next
		
		PrintTowers =  msgString & "<tr><b><td>Tower1</td><td>Tower2</td><td>Tower3</td></b></table>"
	End Function

End Class

Dim Towers
Dim solved
Dim towers_array

Set Towers = Nothing
Set Towers = New TowersOfHanoi
On Error Resume Next
function_name Towers
On Error GoTo 0
towers_array = Towers.Towers
solved = true
For i = 0 to Towers.Disks
	If towers_array(2, Towers.Disks-i) <> i Then
		solved = false
		Exit For
	End If
Next

If solved and Towers.Legal Then
	document.write("<h3>Congratulations!  You solved the Towers of Hanoi problem for three towers and " & Towers.Disks + 1 & " disks.</h3>")
	
Else
		document.write("<h3>You have failed to solve the problem correctly.</h3><BR>")	
		If Err Then
			document.write("<font color=""red"">Error Processing Test Case. Error Desciption [" & Err.Description & "]</font><br>")
		End If
End If
	document.write(Towers.PrintTowers())

Set Towers = Nothing
